
import numpy as np
import rasterio as rio
import datetime
from osgeo import gdal,gdal_array
from KMeans import unsupervised_classification
from Raster_vector import Raster_vector
from Crop_vector import cut_shp
from maclearn_result import random_test


def result_Classification(maks_path,ref_img_path,tar_img_path,multiple_images_file,
                          class_data_file,class_noyundata_file,class_shp_file,nocloud_shp_file,out_file,jizhun_file):   
    num_classes = 10
    num_iterations = 5
    img = rio.open(maks_path)  
    img1 = rio.open(ref_img_path)
    band = img1.count
    prof = img.profile  
    prof.update(count=1)
    prof1 = img1.profile  
    prof1.update(count=band)
    prof2 = img1.profile  
    prof2.update(count=band*2)
    
    mask =  gdal_array.LoadFile(maks_path)
    ref_img = gdal_array.LoadFile(ref_img_path)
    
    
    tar_img = gdal_array.LoadFile(tar_img_path)
    maks_fan = 1-mask
    a = np.r_[ref_img*maks_fan,tar_img*maks_fan]#结合成多波段变化量用于分类
    with rio.open(multiple_images_file,'w',**prof2) as dst:
        dst.write(a)
    unsupervised_classification(multiple_images_file, num_classes, num_iterations,class_data_file)#非监督分类
    unsupervised_classification(ref_img_path, num_classes, num_iterations,jizhun_file)#非监督分类
    num_class_data = gdal_array.LoadFile(class_data_file)
    kmean_data = (num_class_data + 1 )*maks_fan
    with rio.open(class_noyundata_file,'w',**prof) as dst:
        dst.write(kmean_data,1)   
    Raster_vector(class_noyundata_file,class_shp_file)#栅格转矢量
    
    cut_shp(class_shp_file,nocloud_shp_file)
    
    random_test(ref_img_path,nocloud_shp_file,out_file)