
from rasterio.plot import show
import matplotlib.pyplot as plt
import numpy as np
import math
import rasterio as rio
import datetime
import torch
from osgeo import gdal,gdal_array
from Class_results import result_Classification
import os
from mnspi_sim_pix import nspi_sim_pix,wlr_sim_pix
from super_pixel_image import super_pixel_image
from maclearn_result import random_test

starttime= datetime.datetime.now()
def distances_to_center(matrix,x,y):       
    rows, cols = matrix.shape
    center_row, center_col = x,y
    row_indices = torch.arange(rows).view(-1, 1)
    col_indices = torch.arange(cols).view(1, -1)    
    row_distances = row_indices - center_row
    col_distances = col_indices - center_col
    distances = torch.sqrt(row_distances**2 + col_distances**2)
    return np.array(distances)

def top_20(arr_2d,num_sim):
    non_zero_indices = np.argwhere(arr_2d != 0)
    non_zero_values = arr_2d[non_zero_indices[:, 0], non_zero_indices[:, 1]]
    sorted_indices = np.argsort(non_zero_values)[:num_sim]
    arr_2d[:] = 0
    for index in non_zero_indices[sorted_indices]:
        arr_2d[tuple(index)] = 1
    return arr_2d
def cc(cloud_img,simi_location,clear_img,diff,time_dif,cloud_x,cloud_y):
    sim_cloud = (cloud_img * simi_location).flatten()
    sim_cloud = sim_cloud[sim_cloud != 0]
    sim_cloud_mean = np.mean(sim_cloud)
    sim_clear = (clear_img * simi_location).flatten()
    sim_clear = sim_clear[sim_clear != 0]
    sim_clear_mean = np.mean(sim_clear)
    diff_flatten = diff .flatten()
    diff_flatten = diff_flatten[diff_flatten != 0] 
    wi = (1/diff_flatten)/sum(1/diff_flatten)             
    time_dif[cloud_x,cloud_y ] = sum(wi*(sim_cloud-sim_clear))
    a = sum(wi*(sim_cloud-sim_cloud_mean)*(sim_clear-sim_clear_mean)) / sum(wi*(sim_clear-sim_clear_mean)*(sim_clear-sim_clear_mean))
    b = sim_cloud_mean - a*sim_clear_mean
    c = sum(wi*(sim_cloud-sim_clear))
    return  a,b,c
def dc(cloud_img,clear_img,mask,jizhun_class,cloud_class,mask_loca,nspi_loc):      
    time_dif = np.zeros((rows,cols))
    cloud_x,cloud_y = mask_loca 
    jizhun_class_data = jizhun_class[cloud_x,cloud_y]
    cloud_class_data  = cloud_class[cloud_x,cloud_y]
    jizhun_loc = np.where(jizhun_class == jizhun_class_data, 1, 0)
    cloud_loc  = np.where(cloud_class == cloud_class_data, 1, 0)   
    cloud_img_sim_loc =nspi_loc# wlr_sim_pix(clear_img,cloud_x,cloud_y)
    #show(cloud_img_sim_loc)##############################################
    sim_pixels = cloud_img_sim_loc*cloud_loc#*jizhun_loc
    Diff_data = ((abs(clear_img - clear_img[cloud_x,cloud_y ])+1).astype(np.float64))*sim_pixels       
    Diff_distance = (distances_to_center(clear_img,cloud_x,cloud_y)+1)*sim_pixels   #jisuan taijiu           
    diff = np.multiply(Diff_data , Diff_distance) 
    simi_location_num = sum((sim_pixels).flatten())
    #show(diff)         
    if simi_location_num >= num_sim:
        simi_location = top_20(diff,num_sim)  
        #show(simi_location)#####################################################
        a , b , c = cc(cloud_img,simi_location,clear_img,diff,time_dif,cloud_x,cloud_y)
    elif 5<simi_location_num < num_sim:
        simi_location = (sim_pixels) 
        #show(simi_location)#####################################################
        a , b , c = cc(cloud_img,simi_location,clear_img,diff,time_dif,cloud_x,cloud_y)
    else:
        sim_pixels = cloud_img_sim_loc*cloud_loc#*jizhun_loc
        Diff_data = ((abs(clear_img - clear_img[cloud_x,cloud_y ]) +1).astype(np.float64))*sim_pixels       
        Diff_distance = (distances_to_center(clear_img,cloud_x,cloud_y)+1)*sim_pixels   #jisuan taijiu           
        diff = np.multiply(Diff_data , Diff_distance) 
        simi_location_num = sum((sim_pixels).flatten())
        if simi_location_num >= num_sim:
            simi_location = top_20(diff,num_sim)  
            #show(simi_location)#####################################################
            a , b , c = cc(cloud_img,simi_location,clear_img,diff,time_dif,cloud_x,cloud_y)
        elif 5<simi_location_num < num_sim:
            simi_location = (sim_pixels) 
            #show(simi_location)#####################################################
            a , b , c = cc(cloud_img,simi_location,clear_img,diff,time_dif,cloud_x,cloud_y)
        else:
            a = np.mean(cloud_img.flatten()[cloud_img.flatten() != 0])/np.mean(clear_img.flatten()[clear_img.flatten() != 0])
            b = 0
            c = 0
    
    my_result = a*clear_img[cloud_x,cloud_y ]+b
    time_result= clear_img[cloud_x,cloud_y ]+ c
     
    print(simi_location_num,a*clear_img[cloud_x,cloud_y ]+b,clear_img[cloud_x,cloud_y ]+ c,cloud_img[cloud_x,cloud_y ])    

    return my_result,time_result,sim_pixels


maks_path = r'E:/book/去云算法小论文/实验/缩小范围/cloud'#'C:/Users/Administrator/Desktop/去云算法小论文/实验/5band/1allmask'
ref_img_path=r"E:/book/去云算法小论文/实验/缩小范围/20221019"   #参考影响
tar_img_path=r"E:/book/去云算法小论文/实验/缩小范围/20220929"   #目标影响   ref_img_path
mask = gdal_array.LoadFile(maks_path)
rows,cols  = mask.shape[0],mask.shape[1] 

result_class_file = r'E:/book/中间文件6'
os.makedirs(result_class_file, exist_ok=True)
multiple_images_file = result_class_file+"/"+'多镜像结合.tif'
class_data_file = result_class_file+"/"+'class_data.tif'
class_noyundata_file =result_class_file+"/"+ r'class_noyundata.tif'
class_shp_file = result_class_file+"/"+'class_shp.shp'
nocloud_shp_file = result_class_file+"/"+'nocloud_shp.shp'
out_file = result_class_file+"/"+'result_class0201.tif'

#out_file = r'E:/book/1019class1.tif'
jizhun_file = result_class_file+"/"+'jizhun_class.tif'

resultPath = result_class_file+"/"+'real_img.png'
super_img_path = result_class_file+"/"+'real_img.tif' 
q = 2

#################分类以及超像素影像################需要注销##############
result_Classification(maks_path,ref_img_path,tar_img_path,multiple_images_file,  
                      class_data_file,class_noyundata_file,class_shp_file,nocloud_shp_file,out_file,jizhun_file)
super_pixel_image(ref_img_path,super_img_path,resultPath,rows,cols)  
random_test(super_img_path,nocloud_shp_file,out_file)
#######################################################################

cloud_img  = gdal_array.LoadFile(tar_img_path)
clear_img  = gdal_array.LoadFile(ref_img_path)
jizhun_class = gdal_array.LoadFile(jizhun_file)
cloud_class = gdal_array.LoadFile(out_file)
mask_locas = np.argwhere(mask == 1) 
num_sim = 20
my_result_ = np.copy(cloud_img)
time_result_ = np.copy(cloud_img)
my_result_1 = np.copy(cloud_img)
time_result_1 = np.copy(cloud_img)
print(cloud_img.shape[0])
for mask_loca in mask_locas:
    cloud_x,cloud_y = mask_loca
    nspi_loc = nspi_sim_pix(clear_img,15,cloud_x,cloud_y)
    for i in range(cloud_img.shape[0]):
        nspi_loc1 = wlr_sim_pix(clear_img[i],cloud_x,cloud_y)
        print(i,mask_loca)        
        my_result,time_result ,sim_pixels = dc(cloud_img[i],clear_img[i],mask,jizhun_class,cloud_class,mask_loca,nspi_loc1)
        my_result1,time_result1 ,sim_pixels1 = dc(cloud_img[i],clear_img[i],mask,jizhun_class,cloud_class,mask_loca,nspi_loc)
        my_result_[i,cloud_x,cloud_y] = my_result
        time_result_[i,cloud_x,cloud_y] = time_result1
        my_result_1[i,cloud_x,cloud_y] = my_result1
        time_result_1[i,cloud_x,cloud_y] = time_result
        print('##################################')

img1 = rio.open(ref_img_path)
band1 = img1.count 
prof = img1.profile  
prof.update(count=band1)
prof1 = img1.profile  
prof1.update(count=1)
with rio.open(r'E:/book/结果文件/iwlr_wlr.tif','w',**prof) as dst:
    dst.write(my_result_)   
with rio.open(r'E:/book/结果文件/imnspi_nspi.tif','w',**prof) as dst:
    dst.write(time_result_)   
    
    
with rio.open(r'E:/book/结果文件/wlr_nspi.tif','w',**prof) as dst:
    dst.write(my_result_1)   
with rio.open(r'E:/book/结果文件/imnspi_wlr.tif','w',**prof) as dst:
    dst.write(time_result_1)
endtime = datetime.datetime.now()
print (endtime - starttime)







